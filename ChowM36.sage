load('BoundaryComplex.sage')
# we work over Q rather than Z because it is much faster
# H1,H2 are extra variable corresponding to pullbacks of H1 and H2 on P2xP2
# They are used to compute degree morphism, cf. Theorem 6.8 in article
R.<D123_456, D124_356, D125_346, D126_345, D134_256, D135_246, D136_245, D145_236, D146_235, D156_234, D234_156, D235_146, D236_145, D245_136, D246_135, D256_134, D345_126, D346_125, D356_124, D456_123, D12_3456, D13_2456, D14_2356, D15_2346, D16_2345, D23_1456, D24_1356, D25_1346, D26_1345, D34_1256, D35_1246, D36_1245, D45_1236, D46_1235, D56_1234, D12_34_56, D34_12_56, D16_23_45, D23_16_45, D15_23_46, D23_15_46, D14_23_56, D23_14_56, D13_24_56, D24_13_56, D13_25_46, D25_13_46, D14_25_36, D25_14_36, D15_24_36, D24_15_36, D16_24_35, D24_16_35, D16_25_34, D25_16_34, D15_26_34, D26_15_34, D14_26_35, D26_14_35, D13_26_45, D26_13_45, D12_36_45, D36_12_45, D12_35_46, D35_12_46,H1,H2> = QQ[]

# We write out all pullbacks by hand in order to avoid tricky code dealing with indices
# Here e.g. r6 denotes the 6th restriction map $r_6$ to $\overline{M}_{0,5}$
# and e.g. r6_12 is the pullback along $r_6$ of the divisor $D_{12} = D_{12,345}$ on $\overline{M}_{0,5}$
# See Section 6 of the article for details
r6_12 = D345_126 + D12_3456 + D36_12_45 + D12_35_46 + D12_34_56
r6_13 = D245_136 + D13_2456 + D26_13_45 + D13_25_46 + D13_24_56
r6_14 = D235_146 + D14_2356 + D26_14_35 + D14_25_36 + D14_23_56
r6_15 = D234_156 + D15_2346 + D26_15_34 + D15_24_36 + D15_23_46
r6_23 = D145_236 + D23_1456 + D16_23_45 + D23_15_46 + D23_14_56
r6_24 = D135_246 + D24_1356 + D16_24_35 + D24_15_36 + D24_13_56
r6_25 = D134_256 + D25_1346 + D16_25_34 + D25_14_36 + D25_13_46
r6_34 = D125_346 + D34_1256 + D25_16_34 + D15_26_34 + D34_12_56
r6_35 = D124_356 + D35_1246 + D24_16_35 + D14_26_35 + D35_12_46
r6_45 = D123_456 + D45_1236 + D23_16_45 + D13_26_45 + D12_36_45

r5_12 = D346_125 + D12_3456 + D35_12_46 + D12_36_45 + D12_34_56
r5_13 = D246_135 + D13_2456 + D25_13_46 + D13_26_45 + D13_24_56
r5_14 = D236_145 + D14_2356 + D25_14_36 + D14_26_35 + D14_23_56
r5_16 = D234_156 + D16_2345 + D25_16_34 + D16_24_35 + D16_23_45
r5_23 = D146_235 + D23_1456 + D15_23_46 + D23_16_45 + D23_14_56
r5_24 = D136_245 + D24_1356 + D15_24_36 + D24_16_35 + D24_13_56
r5_26 = D134_256 + D26_1345 + D15_26_34 + D26_14_35 + D26_13_45
r5_34 = D126_345 + D34_1256 + D26_15_34 + D16_25_34 + D34_12_56
r5_36 = D124_356 + D36_1245 + D24_15_36 + D14_25_36 + D36_12_45
r5_46 = D123_456 + D46_1235 + D23_15_46 + D13_25_46 + D12_35_46

r4_12 = D356_124 + D12_3456 + D34_12_56 + D12_36_45 + D12_35_46
r4_13 = D256_134 + D13_2456 + D24_13_56 + D13_26_45 + D13_25_46
r4_15 = D236_145 + D15_2346 + D24_15_36 + D15_26_34 + D15_23_46
r4_16 = D235_146 + D16_2345 + D24_16_35 + D16_25_34 + D16_23_45
r4_23 = D156_234 + D23_1456 + D14_23_56 + D23_16_45 + D23_15_46
r4_25 = D136_245 + D25_1346 + D14_25_36 + D25_16_34 + D25_13_46
r4_26 = D135_246 + D26_1345 + D14_26_35 + D26_15_34 + D26_13_45
r4_35 = D126_345 + D35_1246 + D26_14_35 + D16_24_35 + D35_12_46
r4_36 = D125_346 + D36_1245 + D25_14_36 + D15_24_36 + D36_12_45
r4_56 = D123_456 + D56_1234 + D23_14_56 + D13_24_56 + D12_34_56

r3_12 = D456_123 + D12_3456 + D34_12_56 + D35_12_46 + D36_12_45
r3_14 = D256_134 + D14_2356 + D23_14_56 + D14_26_35 + D14_25_36
r3_15 = D246_135 + D15_2346 + D23_15_46 + D15_26_34 + D15_24_36
r3_16 = D245_136 + D16_2345 + D23_16_45 + D16_25_34 + D16_24_35
r3_24 = D156_234 + D24_1356 + D13_24_56 + D24_16_35 + D24_15_36
r3_25 = D146_235 + D25_1346 + D13_25_46 + D25_16_34 + D25_14_36
r3_26 = D145_236 + D26_1345 + D13_26_45 + D26_15_34 + D26_14_35
r3_45 = D126_345 + D45_1236 + D26_13_45 + D16_23_45 + D12_36_45
r3_46 = D125_346 + D46_1235 + D25_13_46 + D15_23_46 + D12_35_46
r3_56 = D124_356 + D56_1234 + D24_13_56 + D14_23_56 + D12_34_56

r2_13 = D456_123 + D13_2456 + D24_13_56 + D25_13_46 + D26_13_45
r2_14 = D356_124 + D14_2356 + D23_14_56 + D25_14_36 + D26_14_35
r2_15 = D346_125 + D15_2346 + D23_15_46 + D24_15_36 + D26_15_34
r2_16 = D345_126 + D16_2345 + D23_16_45 + D24_16_35 + D25_16_34
r2_34 = D156_234 + D34_1256 + D12_34_56 + D16_25_34 + D15_26_34
r2_35 = D146_235 + D35_1246 + D12_35_46 + D16_24_35 + D14_26_35
r2_36 = D145_236 + D36_1245 + D12_36_45 + D15_24_36 + D14_25_36
r2_45 = D136_245 + D45_1236 + D36_12_45 + D16_23_45 + D13_26_45
r2_46 = D135_246 + D46_1235 + D35_12_46 + D15_23_46 + D13_25_46
r2_56 = D134_256 + D56_1234 + D34_12_56 + D14_23_56 + D13_24_56

r1_23 = D456_123 + D23_1456 + D14_23_56 + D15_23_46 + D16_23_45
r1_24 = D356_124 + D24_1356 + D13_24_56 + D15_24_36 + D16_24_35
r1_25 = D346_125 + D25_1346 + D13_25_46 + D14_25_36 + D16_25_34
r1_26 = D345_126 + D26_1345 + D13_26_45 + D14_26_35 + D15_26_34
r1_34 = D256_134 + D34_1256 + D12_34_56 + D26_15_34 + D25_16_34
r1_35 = D246_135 + D35_1246 + D12_35_46 + D26_14_35 + D24_16_35
r1_36 = D245_136 + D36_1245 + D12_36_45 + D25_14_36 + D24_15_36
r1_45 = D236_145 + D45_1236 + D36_12_45 + D26_13_45 + D23_16_45
r1_46 = D235_146 + D46_1235 + D35_12_46 + D25_13_46 + D23_15_46
r1_56 = D234_156 + D56_1234 + D34_12_56 + D24_13_56 + D23_14_56

D3_3 = [D123_456, D124_356, D125_346, D126_345, D134_256, D135_246,
        D136_245, D145_236, D146_235, D156_234, D234_156, D235_146, D236_145,
        D245_136, D246_135, D256_134, D345_126, D346_125, D356_124, D456_123]

D2_4 = [D12_3456, D13_2456, D14_2356, D15_2346, D16_2345, D23_1456, D24_1356, D25_1346,
        D26_1345, D34_1256, D35_1246, D36_1245, D45_1236, D46_1235, D56_1234]

D2_2_2 = [D23_15_46, D15_23_46, D13_25_46, D25_13_46, D14_25_36, D25_14_36,
          D24_15_36, D15_24_36, D26_13_45, D13_26_45, D26_14_35, D14_26_35, D16_23_45,
          D23_16_45, D16_24_35, D24_16_35, D12_35_46, D35_12_46, D36_12_45, D12_36_45,
          D15_26_34, D26_15_34, D25_16_34, D16_25_34, D12_34_56, D34_12_56, D13_24_56,
          D24_13_56, D23_14_56, D14_23_56]

all_D = D3_3 + D2_4 + D2_2_2

# input: indices i,j,k
# output: ri_jk
def get_r(i,j,k):
    if i != 0 and j != 0 and k != 0 and i != j and i != k:
       if j < k:
          return eval('r' + str(i) + '_' + str(j) + str(k))
       elif j > k:
          return eval('r' + str(i) + '_' + str(k) + str(j))
       else:
          return 0
    else:
       return 0

# this makes it easy to access the ri_jk as r[i][j][k]
r = [[[get_r(i,j,k) for k in range(7)] for j in range(7)] for i in range(7)]

# this gives the linear relation
# $r_m^*(D_{ij} + D_{kl}) = r_m^*(D_{il} + D_{jk}$
def lin_rel(i,j,k,l,m):
    return (r[m][i][j] + r[m][k][l]) - (r[m][i][l] + r[m][j][k])

# list of all linear relations
lin_rels = [lin_rel(i,j,k,l,m) for i,j,k,l in list(permutations(range(1,7),int(4))) for m in range(1,7) if m != i and m != j and m != k and m != l]

# this takes a variable in R and converts it to the appropriate string to
# interface with the boundary complex from 'BoundaryComplex.sage'
# e.g. D12_3456 -> 'D12', D123_456 -> 'D123' D12_34_56 -> 'D12_34_56'
def div_to_str(D):
    if D in D2_4 or D in D3_3:
       return str(D).split('_')[0]
    elif D in D2_2_2:
         return str(D)

# list of all multiplicative relations for $\widetilde{M}_1(3,6)$
mult_rels = [D1*D2 for (D1,D2) in list(combinations(all_D,2)) if {div_to_str(D1),div_to_str(D2)} not in all_edges_1]

# extra relations to deal with extra variables
bonus_rels = [H1 - (r6_12 + r6_35 + r6_45), H2 - (r5_12 + r5_36 + r5_46)]

# list of all relations for $\widetilde{M}_1(3,6)$
rels = lin_rels+mult_rels+bonus_rels

I = R.ideal(rels)

# $S is chow ring for $\widetilde{M}_1(3,6)$
# we redefine all previous variables below so that they lie in $S$ rather than $R$
S.<D123_456, D124_356, D125_346, D126_345, D134_256, D135_246, D136_245, D145_236, D146_235, D156_234, D234_156, D235_146, D236_145, D245_136, D246_135, D256_134, D345_126, D346_125, D356_124, D456_123, D12_3456, D13_2456, D14_2356, D15_2346, D16_2345, D23_1456, D24_1356, D25_1346, D26_1345, D34_1256, D35_1246, D36_1245, D45_1236, D46_1235, D56_1234, D12_34_56, D34_12_56, D16_23_45, D23_16_45, D15_23_46, D23_15_46, D14_23_56, D23_14_56, D13_24_56, D24_13_56, D13_25_46, D25_13_46, D14_25_36, D25_14_36, D15_24_36, D24_15_36, D16_24_35, D24_16_35, D16_25_34, D25_16_34, D15_26_34, D26_15_34, D14_26_35, D26_14_35, D13_26_45, D26_13_45, D12_36_45, D36_12_45, D12_35_46, D35_12_46,H1,H2> = QuotientRing(R,I)

D3_3 = [D123_456, D124_356, D125_346, D126_345, D134_256, D135_246,
        D136_245, D145_236, D146_235, D156_234, D234_156, D235_146, D236_145,
        D245_136, D246_135, D256_134, D345_126, D346_125, D356_124, D456_123]

D2_4 = [D12_3456, D13_2456, D14_2356, D15_2346, D16_2345, D23_1456, D24_1356, D25_1346,
        D26_1345, D34_1256, D35_1246, D36_1245, D45_1236, D46_1235, D56_1234]

D2_2_2 = [D23_15_46, D15_23_46, D13_25_46, D25_13_46, D14_25_36, D25_14_36,
          D24_15_36, D15_24_36, D26_13_45, D13_26_45, D26_14_35, D14_26_35, D16_23_45,
          D23_16_45, D16_24_35, D24_16_35, D12_35_46, D35_12_46, D36_12_45, D12_36_45,
          D15_26_34, D26_15_34, D25_16_34, D16_25_34, D12_34_56, D34_12_56, D13_24_56,
          D24_13_56, D23_14_56, D14_23_56]

#fi_jk is the pullback $f_i^*(D_{jk})$ where $f_i$ is the $i$th forgetful map
# to $\overline{M}(3,5)$
f6_12 = D126_345 + D12_3456 + D12_36_45 + D35_12_46 + D34_12_56
f6_13 = D136_245 + D13_2456 + D13_26_45 + D25_13_46 + D24_13_56
f6_14 = D146_235 + D14_2356 + D14_26_35 + D25_14_36 + D23_14_56
f6_15 = D156_234 + D15_2346 + D15_26_34 + D24_15_36 + D23_15_46
f6_23 = D236_145 + D23_1456 + D23_16_45 + D15_23_46 + D14_23_56
f6_24 = D246_135 + D24_1356 + D24_16_35 + D15_24_36 + D13_24_56
f6_25 = D256_134 + D25_1346 + D25_16_34 + D14_25_36 + D13_25_46
f6_34 = D346_125 + D34_1256 + D16_25_34 + D26_15_34 + D12_34_56
f6_35 = D356_124 + D35_1246 + D16_24_35 + D26_14_35 + D12_35_46
f6_45 = D456_123 + D45_1236 + D16_23_45 + D26_13_45 + D36_12_45

f5_12 = D125_346 + D12_3456 + D12_35_46 + D36_12_45 + D34_12_56
f5_13 = D135_246 + D13_2456 + D13_25_46 + D26_13_45 + D24_13_56
f5_14 = D145_236 + D14_2356 + D14_25_36 + D26_14_35 + D23_14_56
f5_16 = D156_234 + D16_2345 + D16_25_34 + D24_16_35 + D23_16_45
f5_23 = D235_146 + D23_1456 + D23_15_46 + D16_23_45 + D14_23_56
f5_24 = D245_136 + D24_1356 + D24_15_36 + D16_24_35 + D13_24_56
f5_26 = D256_134 + D26_1345 + D26_15_34 + D14_26_35 + D13_26_45
f5_34 = D345_126 + D34_1256 + D15_26_34 + D25_16_34 + D12_34_56
f5_36 = D356_124 + D36_1245 + D15_24_36 + D25_14_36 + D12_36_45
f5_46 = D456_123 + D46_1235 + D15_23_46 + D25_13_46 + D35_12_46

f4_12 = D124_356 + D12_3456 + D12_34_56 + D36_12_45 + D35_12_46
f4_13 = D134_256 + D13_2456 + D13_24_56 + D26_13_45 + D25_13_46
f4_15 = D145_236 + D15_2346 + D15_24_36 + D26_15_34 + D23_15_46
f4_16 = D146_235 + D16_2345 + D16_24_35 + D25_16_34 + D23_16_45
f4_23 = D234_156 + D23_1456 + D23_14_56 + D16_23_45 + D15_23_46
f4_25 = D245_136 + D25_1346 + D25_14_36 + D16_25_34 + D13_25_46
f4_26 = D246_135 + D26_1345 + D26_14_35 + D15_26_34 + D13_26_45
f4_35 = D345_126 + D35_1246 + D14_26_35 + D24_16_35 + D12_35_46
f4_36 = D346_125 + D36_1245 + D14_25_36 + D24_15_36 + D12_36_45
f4_56 = D456_123 + D56_1234 + D14_23_56 + D24_13_56 + D34_12_56

f3_12 = D123_456 + D12_3456 + D12_34_56 + D12_35_46 + D12_36_45
f3_14 = D134_256 + D14_2356 + D14_23_56 + D26_14_35 + D25_14_36
f3_15 = D135_246 + D15_2346 + D15_23_46 + D26_15_34 + D24_15_36
f3_16 = D136_245 + D16_2345 + D16_23_45 + D25_16_34 + D24_16_35
f3_24 = D234_156 + D24_1356 + D24_13_56 + D16_24_35 + D15_24_36
f3_25 = D235_146 + D25_1346 + D25_13_46 + D16_25_34 + D14_25_36
f3_26 = D236_145 + D26_1345 + D26_13_45 + D15_26_34 + D14_26_35
f3_45 = D345_126 + D45_1236 + D13_26_45 + D23_16_45 + D36_12_45
f3_46 = D346_125 + D46_1235 + D13_25_46 + D23_15_46 + D35_12_46
f3_56 = D356_124 + D56_1234 + D13_24_56 + D23_14_56 + D34_12_56

f2_13 = D123_456 + D13_2456 + D13_24_56 + D13_25_46 + D13_26_45
f2_14 = D124_356 + D14_2356 + D14_23_56 + D14_25_36 + D14_26_35
f2_15 = D125_346 + D15_2346 + D15_23_46 + D15_24_36 + D15_26_34
f2_16 = D126_345 + D16_2345 + D16_23_45 + D16_24_35 + D16_25_34
f2_34 = D234_156 + D34_1256 + D34_12_56 + D25_16_34 + D26_15_34
f2_35 = D235_146 + D35_1246 + D35_12_46 + D24_16_35 + D26_14_35
f2_36 = D236_145 + D36_1245 + D36_12_45 + D24_15_36 + D25_14_36
f2_45 = D245_136 + D45_1236 + D12_36_45 + D23_16_45 + D26_13_45
f2_46 = D246_135 + D46_1235 + D12_35_46 + D23_15_46 + D25_13_46
f2_56 = D256_134 + D56_1234 + D12_34_56 + D23_14_56 + D24_13_56

f1_23 = D123_456 + D23_1456 + D23_14_56 + D23_15_46 + D23_16_45
f1_24 = D124_356 + D24_1356 + D24_13_56 + D24_15_36 + D24_16_35
f1_25 = D125_346 + D25_1346 + D25_13_46 + D25_14_36 + D25_16_34
f1_26 = D126_345 + D26_1345 + D26_13_45 + D26_14_35 + D26_15_34
f1_34 = D134_256 + D34_1256 + D34_12_56 + D15_26_34 + D16_25_34
f1_35 = D135_246 + D35_1246 + D35_12_46 + D14_26_35 + D16_24_35
f1_36 = D136_245 + D36_1245 + D36_12_45 + D14_25_36 + D15_24_36
f1_45 = D145_236 + D45_1236 + D12_36_45 + D13_26_45 + D16_23_45
f1_46 = D146_235 + D46_1235 + D12_35_46 + D13_25_46 + D15_23_46
f1_56 = D156_234 + D56_1234 + D12_34_56 + D13_24_56 + D14_23_56

r6_12 = D345_126 + D12_3456 + D36_12_45 + D12_35_46 + D12_34_56
r6_13 = D245_136 + D13_2456 + D26_13_45 + D13_25_46 + D13_24_56
r6_14 = D235_146 + D14_2356 + D26_14_35 + D14_25_36 + D14_23_56
r6_15 = D234_156 + D15_2346 + D26_15_34 + D15_24_36 + D15_23_46
r6_23 = D145_236 + D23_1456 + D16_23_45 + D23_15_46 + D23_14_56
r6_24 = D135_246 + D24_1356 + D16_24_35 + D24_15_36 + D24_13_56
r6_25 = D134_256 + D25_1346 + D16_25_34 + D25_14_36 + D25_13_46
r6_34 = D125_346 + D34_1256 + D25_16_34 + D15_26_34 + D34_12_56
r6_35 = D124_356 + D35_1246 + D24_16_35 + D14_26_35 + D35_12_46
r6_45 = D123_456 + D45_1236 + D23_16_45 + D13_26_45 + D12_36_45

r5_12 = D346_125 + D12_3456 + D35_12_46 + D12_36_45 + D12_34_56
r5_13 = D246_135 + D13_2456 + D25_13_46 + D13_26_45 + D13_24_56
r5_14 = D236_145 + D14_2356 + D25_14_36 + D14_26_35 + D14_23_56
r5_16 = D234_156 + D16_2345 + D25_16_34 + D16_24_35 + D16_23_45
r5_23 = D146_235 + D23_1456 + D15_23_46 + D23_16_45 + D23_14_56
r5_24 = D136_245 + D24_1356 + D15_24_36 + D24_16_35 + D24_13_56
r5_26 = D134_256 + D26_1345 + D15_26_34 + D26_14_35 + D26_13_45
r5_34 = D126_345 + D34_1256 + D26_15_34 + D16_25_34 + D34_12_56
r5_36 = D124_356 + D36_1245 + D24_15_36 + D14_25_36 + D36_12_45
r5_46 = D123_456 + D46_1235 + D23_15_46 + D13_25_46 + D12_35_46

r4_12 = D356_124 + D12_3456 + D34_12_56 + D12_36_45 + D12_35_46
r4_13 = D256_134 + D13_2456 + D24_13_56 + D13_26_45 + D13_25_46
r4_15 = D236_145 + D15_2346 + D24_15_36 + D15_26_34 + D15_23_46
r4_16 = D235_146 + D16_2345 + D24_16_35 + D16_25_34 + D16_23_45
r4_23 = D156_234 + D23_1456 + D14_23_56 + D23_16_45 + D23_15_46
r4_25 = D136_245 + D25_1346 + D14_25_36 + D25_16_34 + D25_13_46
r4_26 = D135_246 + D26_1345 + D14_26_35 + D26_15_34 + D26_13_45
r4_35 = D126_345 + D35_1246 + D26_14_35 + D16_24_35 + D35_12_46
r4_36 = D125_346 + D36_1245 + D25_14_36 + D15_24_36 + D36_12_45
r4_56 = D123_456 + D56_1234 + D23_14_56 + D13_24_56 + D12_34_56

r3_12 = D456_123 + D12_3456 + D34_12_56 + D35_12_46 + D36_12_45
r3_14 = D256_134 + D14_2356 + D23_14_56 + D14_26_35 + D14_25_36
r3_15 = D246_135 + D15_2346 + D23_15_46 + D15_26_34 + D15_24_36
r3_16 = D245_136 + D16_2345 + D23_16_45 + D16_25_34 + D16_24_35
r3_24 = D156_234 + D24_1356 + D13_24_56 + D24_16_35 + D24_15_36
r3_25 = D146_235 + D25_1346 + D13_25_46 + D25_16_34 + D25_14_36
r3_26 = D145_236 + D26_1345 + D13_26_45 + D26_15_34 + D26_14_35
r3_45 = D126_345 + D45_1236 + D26_13_45 + D16_23_45 + D12_36_45
r3_46 = D125_346 + D46_1235 + D25_13_46 + D15_23_46 + D12_35_46
r3_56 = D124_356 + D56_1234 + D24_13_56 + D14_23_56 + D12_34_56

r2_13 = D456_123 + D13_2456 + D24_13_56 + D25_13_46 + D26_13_45
r2_14 = D356_124 + D14_2356 + D23_14_56 + D25_14_36 + D26_14_35
r2_15 = D346_125 + D15_2346 + D23_15_46 + D24_15_36 + D26_15_34
r2_16 = D345_126 + D16_2345 + D23_16_45 + D24_16_35 + D25_16_34
r2_34 = D156_234 + D34_1256 + D12_34_56 + D16_25_34 + D15_26_34
r2_35 = D146_235 + D35_1246 + D12_35_46 + D16_24_35 + D14_26_35
r2_36 = D145_236 + D36_1245 + D12_36_45 + D15_24_36 + D14_25_36
r2_45 = D136_245 + D45_1236 + D36_12_45 + D16_23_45 + D13_26_45
r2_46 = D135_246 + D46_1235 + D35_12_46 + D15_23_46 + D13_25_46
r2_56 = D134_256 + D56_1234 + D34_12_56 + D14_23_56 + D13_24_56

r1_23 = D456_123 + D23_1456 + D14_23_56 + D15_23_46 + D16_23_45
r1_24 = D356_124 + D24_1356 + D13_24_56 + D15_24_36 + D16_24_35
r1_25 = D346_125 + D25_1346 + D13_25_46 + D14_25_36 + D16_25_34
r1_26 = D345_126 + D26_1345 + D13_26_45 + D14_26_35 + D15_26_34
r1_34 = D256_134 + D34_1256 + D12_34_56 + D26_15_34 + D25_16_34
r1_35 = D246_135 + D35_1246 + D12_35_46 + D26_14_35 + D24_16_35
r1_36 = D245_136 + D36_1245 + D12_36_45 + D25_14_36 + D24_15_36
r1_45 = D236_145 + D45_1236 + D36_12_45 + D26_13_45 + D23_16_45
r1_46 = D235_146 + D46_1235 + D35_12_46 + D25_13_46 + D23_15_46
r1_56 = D234_156 + D56_1234 + D34_12_56 + D24_13_56 + D23_14_56

psi12 = f6_23 + f6_45 + r1_26
psi13 = f6_23 + f6_45 + r1_36
psi14 = f6_24 + f6_35 + r1_46
psi15 = f6_25 + f6_34 + r1_56
psi16 = f5_26 + f5_34 + r1_56

psi21 = f6_13 + f6_45 + r2_16
psi23 = f6_13 + f6_45 + r2_36
psi24 = f6_14 + f6_35 + r2_46
psi25 = f6_15 + f6_34 + r2_56
psi26 = f5_16 + f5_34 + r2_56

psi31 = f6_12 + f6_45 + r3_16
psi32 = f6_12 + f6_45 + r3_26
psi34 = f6_14 + f6_25 + r3_46
psi35 = f6_15 + f6_24 + r3_56
psi36 = f5_16 + f5_24 + r3_56

psi41 = f6_12 + f6_35 + r4_16
psi42 = f6_12 + f6_35 + r4_26
psi43 = f6_13 + f6_25 + r4_36
psi45 = f6_15 + f6_23 + r4_56
psi46 = f5_16 + f5_23 + r4_56

psi51 = f6_12 + f6_34 + r5_16
psi52 = f6_12 + f6_34 + r5_26
psi53 = f6_13 + f6_24 + r5_36
psi54 = f6_14 + f6_23 + r5_46
psi56 = f4_16 + f4_23 + r5_46

psi61 = f5_12 + f5_34 + r6_15
psi62 = f5_12 + f5_34 + r6_25
psi63 = f5_13 + f5_24 + r6_35
psi64 = f5_14 + f5_23 + r6_45
psi65 = f4_15 + f4_23 + r6_45

# define psi 0i, psi i0, psi ii, so we can define psi below
for i in range(7):
    var('psi0' + str(i))
    var('psi' + str(i) + '0')
    var('psi' + str(i) + str(i))

#psi[i][j] = $\psi_{ij}$
psi = [[eval('psi' + str(i) + str(j)) for j in range(7)] for i in range(7)]

# the following portion of the code was mostly written by Valery Alexeev, with
# minor edits and comments added by Nolan Schock
# it computes the products of the psi classes using the ring computed above,
# checks S_6-invariance, and lists all possible cases

# The degree morphism $A^4 \to \bQ$
# all this does is turn an expression like 8*H1^2*H2^2 into 8
def ev(x):
    if x == 0:
        return 0
    else:
        return R.ideal(H1^2*H2^2-1).reduce(x)

S6 = [x for x in permutations(range(1, 7))]

# input: a tuple g, an element of S6
#        a pair of indices between 1,...,6
# output: the action of g on the pair
def S6_acton_pair(g, pair):
    return tuple([g[pair[0] - 1], g[pair[1] - 1]])

# input: a tuple g, an element of S6
#       a tuple of four pairs of indices between 1,...,6
# output: the action of g on each pair in the tuple
def S6_acton_4ple(g, t):
    return tuple([S6_acton_pair(g, pair) for pair in t])

# input: a 4-tuple ((i1,j1),(i2,j2),(i3,j3),(i4,j4)) of indices between 1,...,6
# output: the product of the corresponding psi_{i_k,j_k}
def psiprod(L):
    ((i1, j1), (i2, j2), (i3, j3), (i4, j4)) = L
    return ev(psi[i1][j1] * psi[i2][j2] * psi[i3][j3] * psi[i4][j4])

# for each 4-tuple of indices, check all its permutations have same product of
# psi classes as expected
def check_permutations_of_product(L, tofile=False):
    global fileout
    already_seen = set()

    first_prod = psiprod(L)
    print(short(L), '\t', first_prod,)
    if tofile:
        print >>fileout, short(L), first_prod,

    for g in S6:
        L2 = S6_acton_4ple(g, L)

        if L2 in already_seen:
            continue
        else:
            already_seen.add(L2)

        prod = psiprod(L2)
        if prod != first_prod:
            print('----- different product:', g, L2, prod)
            sys.stdout.flush()
            if tofile:
                print >>fileout, '----- different product:', g, L2, prod
                fileout.flush()
            return
    print('... symmetric')
    sys.stdout.flush()
    if tofile:
        print >>fileout, '... symmetric'
        fileout.flush()

# a shorter version of a tuple for printing
def short(t):
    return ','.join([str(p[0]) + str(p[1]) for p in t])

pairs = tuple([(i, j) for i in range(1, 7) for j in range(1, 7) if i!= j])

# the main function which computes all products of psi classes
def check_permutation_invariance(tofile=False):
    global already_seen, cases, fileout

    if tofile:
        fileout = open('check_invariance.txt', 'w')

    compute_cases()
    for t in cases:
        check_permutations_of_product(t, tofile)

# sorts a tuple so we can compute cases below
def normalized_tuple(t):
    return tuple( sorted(list(t)) )

# computes all possible cases for products of psi classes
def compute_cases():
    global cases

    cases = []
    seen = set()
    for t in combinations_with_replacement(pairs, 4):
        t = normalized_tuple(t)
        if t in seen:
            continue

        cases.append(t)
        for g in S6:
            t1 = S6_acton_4ple(g, t)
            t2 = normalized_tuple(t1)
            seen.add(t2)
    print('Found', len(cases), 'cases')

B3_3 = sum(D3_3)
B2_4 = sum(D2_4)
B2_2_2 = sum(D2_2_2)

# KB is the log canonical divisor on $\widetilde{M}_1(3,6)$
# See Proposition 7.1 of the article
KB = 7/10*B3_3 + 4/5*B2_4 + 6/5*B2_2_2
# the below code checks that (K + B)^4 is positive for $\widetilde{M}_1(3,6)$
# (see Lemma 7.7 in the article)
#if ev(KB^4) > 0:
#    print('(K + B)^4 = ', ev(KB^4), '> 0')
#else:
#    print('(K+B)^4 is not positive')
